AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'VPC NAT Gateway stack for static ip lambda functions: '
Resources:
  ServerlessVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
  ElasticIpLambda:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  InternetGatewayLambda:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachmentLambda:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: ServerlessVPC
      InternetGatewayId:
        Ref: InternetGatewayLambda
  NatGatewayLambda:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - ElasticIpLambda
          - AllocationId
      SubnetId:
        Ref: ServerlessPublicSubnetA
  ServerlessPrivateSubnetA:
    DependsOn: ServerlessVPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: ServerlessVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
  ServerlessPublicSubnetA:
    DependsOn: ServerlessVPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: ServerlessVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.2.0/24
  DefaultPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: ServerlessVPC
  DefaultPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: DefaultPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayLambda
  DefaultPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: ServerlessVPC
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: DefaultPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGatewayLambda
  SubnetRouteTableAssociationLambdaPrivateA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: ServerlessPrivateSubnetA
      RouteTableId:
        Ref: DefaultPrivateRouteTable
  SubnetRouteTableAssociationLambdaPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: ServerlessPublicSubnetA
      RouteTableId:
        Ref: DefaultPublicRouteTable
  ServerlessSecurityGroup:
    DependsOn: ServerlessVPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SecurityGroup for Serverless Functions
      VpcId:
        Ref: ServerlessVPC
Outputs:
  securityGroupIdsOutput:
    Value:
      'Fn::GetAtt': ServerlessSecurityGroup.GroupId
    Export:
      Name: securityGroupIds
  subnetIdsOutput:
    Value:
      Ref: ServerlessPrivateSubnetA
    Export:
      Name: subnetIds
  EIPOutput:
    Value:
      Ref: ElasticIpLambda
    Export:
      Name: EIP

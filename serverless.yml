service: aws-nodejs-static-lambda
frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-sam

provider:
  name: aws
  runtime: nodejs6.10
  profile: ${file(./aws_params.yml):profile}
  stage: ${file(./aws_params.yml):stage}
  region: ${file(./aws_params.yml):region}
  deploymentBucket: ${file(./aws_params.yml):DEPLOYMENT_S3_BUCKET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::${file(./aws_params.yml):INPUT_S3_BUCKET}/*"

  environment:
    FTP_USERNAME: ${file(./aws_params.yml):FTP_USERNAME}
    FTP_HOST: ${file(./aws_params.yml):FTP_HOST}
    FTP_PORT: ${file(./aws_params.yml):FTP_PORT}
    FTP_PASSWORD: ${file(./aws_params.yml):FTP_PASSWORD}
    FTP_FOLDER: ${file(./aws_params.yml):FTP_FOLDER}

functions:
  hello:
    handler: handler_test_ip.hello
    events:
      - http:
          path: gateway_ip/show
          method: get
          cors: true
          integration: lambda
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: ServerlessPrivateSubnetA

  ftp_upload:
    handler: handler.uploadFileToFTP
    events:
      - s3:
          bucket: ${file(./aws_params.yml):INPUT_S3_BUCKET}
          event: s3:ObjectCreated:*
          # rules:
          #   - prefix: ${file(./aws_params.yml):INPUT_S3_BUCKET_FOLDER}/
          #   - suffix: .jpg
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
      subnetIds:
        - Ref: ServerlessPrivateSubnetA

resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ElasticIpLambda:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    InternetGatewayLambda:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachmentLambda:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: ServerlessVPC
        InternetGatewayId:
          Ref: InternetGatewayLambda
    NatGatewayLambda:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - ElasticIpLambda
            - AllocationId
        SubnetId:
          Ref: ServerlessPublicSubnetA
    ServerlessPrivateSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.1.0/24"
    ServerlessPublicSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.2.0/24"
    DefaultPrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: DefaultPrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGatewayLambda
    DefaultPublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: DefaultPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGatewayLambda
    SubnetRouteTableAssociationLambdaPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessPrivateSubnetA
        RouteTableId:
          Ref: DefaultPrivateRouteTable
    SubnetRouteTableAssociationLambdaPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessPublicSubnetA
        RouteTableId:
          Ref: DefaultPublicRouteTable
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC

#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${file(./config/aws_params.yml):DEPLOYMENT_S3_BUCKET}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
